from aiogram import Router, types, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime
from models import Project, Expense, ProjectStatus, ProjectType
from sqlalchemy import select, func

router = Router()

async def send_statistics(message: types.Message, db):
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
    completed_projects = await db.execute(
        select(func.count()).where(
            Project.user_id == user_id,
            Project.status == ProjectStatus.COMPLETED
        )
    )
    completed_count = completed_projects.scalar()
    
    active_projects = await db.execute(
        select(func.count()).where(
            Project.user_id == user_id,
            Project.status != ProjectStatus.COMPLETED
        )
    )
    active_count = active_projects.scalar()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Ö–æ–¥—ã (—Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã)
    income_result = await db.execute(
        select(func.sum(Project.cost)).where(
            Project.user_id == user_id,
            Project.type == ProjectType.ORDER,
            Project.status == ProjectStatus.COMPLETED
        )
    )
    income = income_result.scalar() or 0
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã
    expenses_result = await db.execute(
        select(func.sum(Expense.amount)).where(Expense.user_id == user_id)
    )
    expenses = expenses_result.scalar() or 0
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å
    profit = income - expenses
    
    message_text = (
        "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã: {completed_count}\n"
        f"üöÄ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã: {active_count}\n"
        f"üí∞ –î–æ—Ö–æ–¥—ã: {income} —Ä—É–±.\n"
        f"üí∏ –†–∞—Å—Ö–æ–¥—ã: {expenses} —Ä—É–±.\n"
        f"üíµ –ü—Ä–∏–±—ã–ª—å: {profit} —Ä—É–±."
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
    
    await message.answer(message_text, reply_markup=builder.as_markup())

@router.callback_query(F.data == "statistics")
async def show_stats(callback: types.CallbackQuery, db):
    await send_statistics(callback.message, db)