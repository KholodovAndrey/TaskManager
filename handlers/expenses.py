from aiogram import Router, types, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime, timedelta
from models import Expense
from sqlalchemy import select, func, delete
from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback
from keyboards.calendar import get_calendar

router = Router()

class ExpenseForm(StatesGroup):
    amount = State()
    date = State()
    comment = State()

def expenses_main_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="üíµ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", callback_data="add_expense"),
        types.InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤", callback_data="expenses_history"),
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    builder.adjust(1)
    return builder.as_markup()

def expense_actions_keyboard(expense_id):
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", 
            callback_data=f"edit_expense_{expense_id}"
        ),
        types.InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", 
            callback_data=f"delete_expense_{expense_id}"
        ),
        types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥", 
            callback_data="expenses_menu"
        )
    )
    builder.adjust(1)
    return builder.as_markup()

def get_skip_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment"))
    return builder.as_markup()

@router.callback_query(F.data == "expenses_menu")
async def show_expenses_menu(callback: types.CallbackQuery):
    await callback.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞–º–∏:", reply_markup=expenses_main_keyboard())

@router.callback_query(F.data == "expenses_history")
async def show_expenses_history(callback: types.CallbackQuery, db):
    one_month_ago = datetime.now() - timedelta(days=30)
    
    result = await db.execute(
        select(Expense).where(
            Expense.user_id == callback.from_user.id,
            Expense.date >= one_month_ago
        ).order_by(Expense.date.desc())
    )
    expenses = result.scalars().all()
    
    if not expenses:
        await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü.", reply_markup=expenses_main_keyboard())
        return
    
    total = sum(expense.amount for expense in expenses)
    message_text = "–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü:\n\n"
    
    for expense in expenses:
        message_text += f"üìÖ {expense.date.strftime('%d.%m.%Y')}: {expense.amount} —Ä—É–±.\n"
        if expense.comment:
            message_text += f"   üí¨ {expense.comment}\n"
        message_text += f"   [ID: {expense.id}]\n\n"
    
    message_text += f"üíµ –ò—Ç–æ–≥–æ: {total} —Ä—É–±."
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="expenses_menu"))
    
    await callback.message.edit_text(message_text, reply_markup=builder.as_markup())

@router.callback_query(F.data.startswith("expense_"))
async def show_expense(callback: types.CallbackQuery, db):
    expense_id = int(callback.data.split("_")[1])
    
    result = await db.execute(
        select(Expense).where(Expense.id == expense_id)
    )
    expense = result.scalar_one_or_none()
    
    if not expense:
        await callback.answer("–†–∞—Å—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    expense_text = f"""
üí∏ –†–∞—Å—Ö–æ–¥: {expense.amount} —Ä—É–±.
üìÖ –î–∞—Ç–∞: {expense.date.strftime('%d.%m.%Y')}
"""
    
    if expense.comment:
        expense_text += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {expense.comment}\n"
    
    await callback.message.edit_text(
        expense_text, 
        reply_markup=expense_actions_keyboard(expense_id)
    )

@router.callback_query(F.data.startswith("delete_expense_"))
async def delete_expense(callback: types.CallbackQuery, db):
    expense_id = int(callback.data.split("_")[2])
    
    await db.execute(
        delete(Expense).where(Expense.id == expense_id)
    )
    await db.commit()
    
    await callback.answer("–†–∞—Å—Ö–æ–¥ —É–¥–∞–ª–µ–Ω!")
    await show_expenses_menu(callback)

@router.callback_query(F.data == "add_expense")
async def start_add_expense(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(ExpenseForm.amount)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")

@router.message(ExpenseForm.amount)
async def process_expense_amount(message: types.Message, state: FSMContext):
    try:
        # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        amount_str = message.text.replace(',', '.')
        amount = float(amount_str)
        
        if amount <= 0:
            await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
            
        await state.update_data(amount=amount)
        await state.set_state(ExpenseForm.date)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=await get_calendar())
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 500 –∏–ª–∏ 500.50):")

@router.callback_query(SimpleCalendarCallback.filter(), ExpenseForm.date)
async def process_expense_date(
    callback: types.CallbackQuery, 
    callback_data: SimpleCalendarCallback, 
    state: FSMContext
):
    calendar = SimpleCalendar()
    selected, date = await calendar.process_selection(callback, callback_data)
    
    if selected:
        await state.update_data(date=date)
        await state.set_state(ExpenseForm.comment)
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–∞—Å—Ö–æ–¥—É:", reply_markup=get_skip_keyboard())

@router.callback_query(F.data == "skip_date", ExpenseForm.date)
async def skip_expense_date(callback: types.CallbackQuery, state: FSMContext):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∫–∞–∫ –¥–∞—Ç—É —Ä–∞—Å—Ö–æ–¥–∞
    await state.update_data(date=datetime.now())
    await state.set_state(ExpenseForm.comment)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–∞—Å—Ö–æ–¥—É:", reply_markup=get_skip_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
@router.callback_query(F.data == "skip_comment", ExpenseForm.comment)
async def skip_expense_comment(callback: types.CallbackQuery, state: FSMContext, db):
    data = await state.get_data()
    
    expense = Expense(
        user_id=callback.from_user.id,
        amount=data['amount'],
        date=data['date'],
        comment=None
    )
    
    db.add(expense)
    await db.commit()
    
    await state.clear()
    await callback.message.edit_text("–†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    await show_expenses_menu(callback)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
@router.message(ExpenseForm.comment)
async def process_expense_comment(message: types.Message, state: FSMContext, db):
    data = await state.get_data()
    
    expense = Expense(
        user_id=message.from_user.id,
        amount=data['amount'],
        date=data['date'],
        comment=message.text
    )
    
    db.add(expense)
    await db.commit()
    
    await state.clear()
    await message.answer("–†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    await show_expenses_menu_from_message(message)

async def show_expenses_menu_from_message(message: types.Message):
    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞–º–∏:", reply_markup=expenses_main_keyboard())