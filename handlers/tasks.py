from aiogram import Router, types, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime
from models import Task, Project, ProjectStatus
from sqlalchemy import select, update, delete
from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback
from keyboards.calendar import get_calendar


class TaskForm(StatesGroup):
    title = State()
    description = State()
    project_id = State()
    deadline = State()

router = Router()

def tasks_main_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", callback_data="my_tasks"),
        types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="add_task"),
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    builder.adjust(1)
    return builder.as_markup()

def task_actions_keyboard(task_id):
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", 
            callback_data=f"complete_task_{task_id}"
        ),
        types.InlineKeyboardButton(
            text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", 
            callback_data=f"edit_task_{task_id}"
        ),
        types.InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", 
            callback_data=f"delete_task_{task_id}"
        ),
        types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥", 
            callback_data="tasks_menu"
        )
    )
    builder.adjust(1)
    return builder.as_markup()

def get_skip_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_description"))
    return builder.as_markup()

async def show_projects_for_selection(message: types.Message, db):
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await db.execute(
        select(Project).where(
            Project.user_id == message.from_user.id,
            Project.status != ProjectStatus.COMPLETED
        )
    )
    projects = result.scalars().all()
    
    builder = InlineKeyboardBuilder()
    for project in projects:
        builder.add(types.InlineKeyboardButton(
            text=project.name, 
            callback_data=f"select_project_{project.id}"  # –ò–∑–º–µ–Ω–∏–ª–∏ –ø—Ä–µ—Ñ–∏–∫—Å
        ))
    
    builder.add(types.InlineKeyboardButton(text="–ë–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞", callback_data="select_no_project"))
    builder.add(types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="tasks_menu"))
    builder.adjust(1)
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –∑–∞–¥–∞—á–∏:", reply_markup=builder.as_markup())

async def process_task_data(callback: types.CallbackQuery, state: FSMContext, db, deadline):
    data = await state.get_data()
    
    task = Task(
        user_id=callback.from_user.id,
        title=data['title'],
        description=data.get('description'),
        project_id=data.get('project_id'),
        deadline=deadline
    )
    
    db.add(task)
    await db.commit()
    
    await state.clear()
    await callback.message.edit_text("–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
    await show_tasks_menu(callback)

@router.callback_query(F.data == "tasks_menu")
async def show_tasks_menu(callback: types.CallbackQuery):
    await callback.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏:", reply_markup=tasks_main_keyboard())

@router.callback_query(F.data == "my_tasks")
async def show_my_tasks(callback: types.CallbackQuery, db):
    result = await db.execute(
        select(Task).where(
            Task.user_id == callback.from_user.id,
            Task.is_completed == False
        )
    )
    tasks = result.scalars().all()
    
    if not tasks:
        await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.", reply_markup=tasks_main_keyboard())
        return
    
    builder = InlineKeyboardBuilder()
    for task in tasks:
        project_name = "–ë–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞"
        if task.project_id:
            project_result = await db.execute(select(Project.name).where(Project.id == task.project_id))
            project_name = project_result.scalar()
        
        builder.add(types.InlineKeyboardButton(
            text=f"{task.title} ({project_name})", 
            callback_data=f"task_{task.id}"  # –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞—á
        ))
    
    builder.add(types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="tasks_menu"))
    builder.adjust(1)
    
    await callback.message.edit_text("–í–∞—à–∏ –∑–∞–¥–∞—á–∏:", reply_markup=builder.as_markup())

@router.callback_query(F.data.regexp(r'^task_\d+$'))
async def show_task(callback: types.CallbackQuery, db):
    task_id = int(callback.data.split("_")[1])
    
    result = await db.execute(
        select(Task).where(Task.id == task_id)
    )
    task = result.scalar_one_or_none()
    
    if not task:
        await callback.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    task_text = f"""
‚úÖ –ó–∞–¥–∞—á–∞: {task.title}
"""
    
    if task.description:
        task_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task.description}\n"
    
    if task.project_id:
        project_result = await db.execute(select(Project.name).where(Project.id == task.project_id))
        project_name = project_result.scalar()
        task_text += f"üìÅ –ü—Ä–æ–µ–∫—Ç: {project_name}\n"
    
    if task.deadline:
        task_text += f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {task.deadline.strftime('%d.%m.%Y')}\n"
    
    task_text += f"üìä –°—Ç–∞—Ç—É—Å: {'–í—ã–ø–æ–ª–Ω–µ–Ω–∞' if task.is_completed else '–ê–∫—Ç–∏–≤–Ω–∞'}\n"
    
    await callback.message.edit_text(
        task_text, 
        reply_markup=task_actions_keyboard(task_id)
    )

@router.callback_query(F.data.startswith("complete_task_"))
async def complete_task(callback: types.CallbackQuery, db):
    task_id = int(callback.data.split("_")[2])
    
    await db.execute(
        update(Task)
        .where(Task.id == task_id)
        .values(
            is_completed=True,
            completed_at=datetime.now()
        )
    )
    await db.commit()
    
    await callback.answer("–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
    await show_tasks_menu(callback)

@router.callback_query(F.data.startswith("delete_task_"))
async def delete_task(callback: types.CallbackQuery, db):
    task_id = int(callback.data.split("_")[2])
    
    await db.execute(
        delete(Task).where(Task.id == task_id)
    )
    await db.commit()
    
    await callback.answer("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!")
    await show_tasks_menu(callback)

@router.callback_query(F.data == "add_task")
async def start_add_task(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(TaskForm.title)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")

@router.message(TaskForm.title)
async def process_task_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(TaskForm.description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", reply_markup=get_skip_keyboard())

@router.callback_query(F.data == "skip_description", TaskForm.description)
async def skip_task_description(callback: types.CallbackQuery, state: FSMContext, db):
    await state.update_data(description=None)
    await state.set_state(TaskForm.project_id)
    await show_projects_for_selection(callback.message, db)

@router.message(TaskForm.description)
async def process_task_description(message: types.Message, state: FSMContext, db):
    if message.text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(description=message.text)
    else:
        await state.update_data(description=None)
    
    await state.set_state(TaskForm.project_id)
    await show_projects_for_selection(message, db)

@router.callback_query(F.data.startswith("select_"), TaskForm.project_id)
async def process_task_project(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "select_no_project":
        project_id = None
    else:
        project_id = int(callback.data.split("_")[2])  # –¢–µ–ø–µ—Ä—å –∏–Ω–¥–µ–∫—Å 2, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–µ—Ñ–∏–∫—Å –∏–∑ –¥–≤—É—Ö —á–∞—Å—Ç–µ–π
    
    await state.update_data(project_id=project_id)
    await state.set_state(TaskForm.deadline)
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):", 
        reply_markup=await get_calendar()
    )

@router.callback_query(F.data == "skip", TaskForm.deadline)
async def skip_task_deadline(callback: types.CallbackQuery, state: FSMContext, db):
    await process_task_data(callback, state, db, None)

@router.callback_query(SimpleCalendarCallback.filter(), TaskForm.deadline)
async def process_task_deadline(
    callback: types.CallbackQuery, 
    callback_data: SimpleCalendarCallback, 
    state: FSMContext, 
    db
):
    calendar = SimpleCalendar()
    selected, date = await calendar.process_selection(callback, callback_data)
    
    if selected:
        await process_task_data(callback, state, db, date)