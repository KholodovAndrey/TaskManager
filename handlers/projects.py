from aiogram import Router, types, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime
from models import Project, ProjectType, ProjectStatus
from sqlalchemy import select, update, delete
from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback
from keyboards.calendar import get_calendar
from aiogram.exceptions import TelegramBadRequest

router = Router()

class ProjectForm(StatesGroup):
    name = State()
    type = State()
    status = State()
    deadline = State()
    cost = State()

class EditProjectForm(StatesGroup):
    status = State()

def projects_main_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="üìã –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã", callback_data="my_projects"),
        types.InlineKeyboardButton(text="üí∞ –ó–∞–∫–∞–∑—ã", callback_data="orders"),
        types.InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ", callback_data="completed_projects"),
        types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="add_project"),
        types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    builder.adjust(2)
    return builder.as_markup()

def project_actions_keyboard(project_id, project_type, current_status):
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    if current_status != ProjectStatus.COMPLETED:
        builder.add(types.InlineKeyboardButton(
            text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", 
            callback_data=f"complete_project_{project_id}"
        ))
    
    builder.add(types.InlineKeyboardButton(
        text="üìä –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", 
        callback_data=f"change_status_{project_id}"
    ))
    
    builder.add(
        types.InlineKeyboardButton(
            text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", 
            callback_data=f"edit_project_{project_id}"
        ),
        types.InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", 
            callback_data=f"delete_project_{project_id}"
        ),
        types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥", 
            callback_data="projects_menu"
        )
    )
    builder.adjust(1)
    return builder.as_markup()

def get_status_keyboard(project_type):
    builder = InlineKeyboardBuilder()
    
    if project_type == ProjectType.PERSONAL:
        builder.add(
            types.InlineKeyboardButton(text="üí° –ò–¥–µ—è", callback_data="status_idea"),
            types.InlineKeyboardButton(text="üöÄ –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", callback_data="status_in_progress"),
            types.InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω", callback_data="status_completed")
        )
    else:  # ProjectType.ORDER
        builder.add(
            types.InlineKeyboardButton(text="üìã –ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏", callback_data="status_agreement"),
            types.InlineKeyboardButton(text="üöÄ –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", callback_data="status_in_progress"),
            types.InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω", callback_data="status_completed")
        )
    
    builder.add(types.InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_status"))
    builder.adjust(1)
    return builder.as_markup()

async def safe_edit_message(message: types.Message, text: str, reply_markup=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏ 'message not modified'"""
    try:
        await message.edit_text(text, reply_markup=reply_markup)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            pass
        else:
            raise

@router.callback_query(F.data == "projects_menu")
async def show_projects_menu(callback: types.CallbackQuery):
    await safe_edit_message(callback.message, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏:", projects_main_keyboard())

@router.callback_query(F.data == "my_projects")
async def show_my_projects(callback: types.CallbackQuery, db):
    result = await db.execute(
        select(Project).where(
            Project.user_id == callback.from_user.id,
            Project.type == ProjectType.PERSONAL,
            Project.status != ProjectStatus.COMPLETED
        )
    )
    projects = result.scalars().all()
    
    if not projects:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏—á–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.", reply_markup=projects_main_keyboard())
        try:
            await callback.message.delete()
        except:
            pass
        return
    
    builder = InlineKeyboardBuilder()
    for project in projects:
        builder.add(types.InlineKeyboardButton(
            text=f"{project.name} ({project.status.value})", 
            callback_data=f"project_{project.id}"
        ))
    
    builder.add(types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="projects_menu"))
    builder.adjust(1)
    
    await callback.message.answer("–í–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã:", reply_markup=builder.as_markup())
    try:
        await callback.message.delete()
    except:
        pass

@router.callback_query(F.data == "orders")
async def show_orders(callback: types.CallbackQuery, db):
    result = await db.execute(
        select(Project).where(
            Project.user_id == callback.from_user.id,
            Project.type == ProjectType.ORDER,
            Project.status != ProjectStatus.COMPLETED
        )
    )
    projects = result.scalars().all()
    
    if not projects:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.", reply_markup=projects_main_keyboard())
        try:
            await callback.message.delete()
        except:
            pass
        return
    
    builder = InlineKeyboardBuilder()
    for project in projects:
        builder.add(types.InlineKeyboardButton(
            text=f"{project.name} ({project.status.value})", 
            callback_data=f"project_{project.id}"
        ))
    
    builder.add(types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="projects_menu"))
    builder.adjust(1)
    
    await callback.message.answer("–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:", reply_markup=builder.as_markup())
    try:
        await callback.message.delete()
    except:
        pass

@router.callback_query(F.data == "completed_projects")
async def show_completed_projects(callback: types.CallbackQuery, db):
    result = await db.execute(
        select(Project).where(
            Project.user_id == callback.from_user.id,
            Project.status == ProjectStatus.COMPLETED
        )
    )
    projects = result.scalars().all()
    
    if not projects:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.", reply_markup=projects_main_keyboard())
        try:
            await callback.message.delete()
        except:
            pass
        return
    
    builder = InlineKeyboardBuilder()
    for project in projects:
        builder.add(types.InlineKeyboardButton(
            text=f"{project.name} ({project.type.value})", 
            callback_data=f"project_{project.id}"
        ))
    
    builder.add(types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="projects_menu"))
    builder.adjust(1)
    
    await callback.message.answer("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:", reply_markup=builder.as_markup())
    try:
        await callback.message.delete()
    except:
        pass

@router.callback_query(F.data.startswith("project_"))
async def show_project(callback: types.CallbackQuery, db):
    project_id = int(callback.data.split("_")[1])
    
    result = await db.execute(
        select(Project).where(Project.id == project_id)
    )
    project = result.scalar_one_or_none()
    
    if not project:
        await callback.answer("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    project_text = f"""
üìÅ –ü—Ä–æ–µ–∫—Ç: {project.name}
üìù –¢–∏–ø: {project.type.value}
üìä –°—Ç–∞—Ç—É—Å: {project.status.value}
"""
    
    if project.deadline:
        project_text += f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {project.deadline.strftime('%d.%m.%Y')}\n"
    
    if project.cost:
        project_text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {project.cost} —Ä—É–±.\n"
    
    if project.completed_at:
        project_text += f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω: {project.completed_at.strftime('%d.%m.%Y')}\n"
    
    await callback.message.answer(
        project_text, 
        reply_markup=project_actions_keyboard(project_id, project.type, project.status)
    )
    try:
        await callback.message.delete()
    except:
        pass

@router.callback_query(F.data.startswith("complete_project_"))
async def complete_project(callback: types.CallbackQuery, db):
    project_id = int(callback.data.split("_")[2])
    
    result = await db.execute(
        select(Project).where(Project.id == project_id)
    )
    project = result.scalar_one_or_none()
    
    if not project:
        await callback.answer("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    await db.execute(
        update(Project)
        .where(Project.id == project_id)
        .values(
            status=ProjectStatus.COMPLETED,
            completed_at=datetime.now()
        )
    )
    await db.commit()
    
    await callback.answer("–ü—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
    await show_projects_menu(callback)

@router.callback_query(F.data.startswith("change_status_"))
async def start_change_status(callback: types.CallbackQuery, state: FSMContext, db):
    project_id = int(callback.data.split("_")[2])
    
    result = await db.execute(
        select(Project).where(Project.id == project_id)
    )
    project = result.scalar_one_or_none()
    
    if not project:
        await callback.answer("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    await state.update_data(project_id=project_id)
    await state.set_state(EditProjectForm.status)
    
    await callback.message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ '{project.name}':",
        reply_markup=get_status_keyboard(project.type)
    )
    try:
        await callback.message.delete()
    except:
        pass

@router.callback_query(EditProjectForm.status, F.data.startswith("status_"))
async def process_change_status(callback: types.CallbackQuery, state: FSMContext, db):
    data = await state.get_data()
    project_id = data['project_id']
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    status_mapping = {
        "status_idea": ProjectStatus.IDEA,
        "status_agreement": ProjectStatus.AGREEMENT,
        "status_in_progress": ProjectStatus.IN_PROGRESS,
        "status_completed": ProjectStatus.COMPLETED
    }
    
    new_status = status_mapping.get(callback.data)
    
    if new_status:
        await db.execute(
            update(Project)
            .where(Project.id == project_id)
            .values(status=new_status)
        )
        await db.commit()
        
        await callback.answer(f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_status.value}")
    
    await state.clear()
    await show_projects_menu(callback)

@router.callback_query(EditProjectForm.status, F.data == "cancel_status")
async def cancel_change_status(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await show_projects_menu(callback)

@router.callback_query(F.data.startswith("delete_project_"))
async def delete_project(callback: types.CallbackQuery, db):
    project_id = int(callback.data.split("_")[2])
    
    await db.execute(
        delete(Project).where(Project.id == project_id)
    )
    await db.commit()
    
    await callback.answer("–ü—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω!")
    await show_projects_menu(callback)

@router.callback_query(F.data == "add_project")
async def start_add_project(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(ProjectForm.name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")
    try:
        await callback.message.delete()
    except:
        pass

@router.message(ProjectForm.name)
async def process_project_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(ProjectForm.type)
    
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="–õ–∏—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç", callback_data="personal"),
        types.InlineKeyboardButton(text="–ó–∞–∫–∞–∑", callback_data="order")
    )
    builder.adjust(1)
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞:", reply_markup=builder.as_markup())

@router.callback_query(ProjectForm.type, F.data.in_(["personal", "order"]))
async def process_project_type(callback: types.CallbackQuery, state: FSMContext):
    project_type = ProjectType.PERSONAL if callback.data == "personal" else ProjectType.ORDER
    await state.update_data(type=project_type)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    initial_status = ProjectStatus.IDEA if callback.data == "personal" else ProjectStatus.AGREEMENT
    await state.update_data(status=initial_status)
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–∫–∞–∑, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    if callback.data == "order":
        await state.set_state(ProjectForm.cost)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞:")
    else:
        # –î–ª—è –ª–∏—á–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–µ–¥–ª–∞–π–Ω–∞
        await state.set_state(ProjectForm.deadline)
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):", 
            reply_markup=get_skip_keyboard()
        )

@router.message(ProjectForm.cost)
async def process_project_cost(message: types.Message, state: FSMContext):
    try:
        cost = float(message.text)
        await state.update_data(cost=cost)
        await state.set_state(ProjectForm.deadline)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):", 
            reply_markup=get_skip_keyboard()
        )
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:")

@router.callback_query(ProjectForm.deadline, F.data == "skip_deadline")
async def skip_deadline(callback: types.CallbackQuery, state: FSMContext, db):
    await process_project_data(callback, state, db, None)

@router.callback_query(SimpleCalendarCallback.filter(), ProjectForm.deadline)
async def process_deadline(
    callback: types.CallbackQuery, 
    callback_data: SimpleCalendarCallback, 
    state: FSMContext, 
    db
):
    calendar = SimpleCalendar()
    selected, date = await calendar.process_selection(callback, callback_data)
    
    if selected:
        await process_project_data(callback, state, db, date)

async def process_project_data(callback: types.CallbackQuery, state: FSMContext, db, deadline):
    data = await state.get_data()
    
    project = Project(
        user_id=callback.from_user.id,
        name=data['name'],
        type=data['type'],
        status=data['status'],
        deadline=deadline,
        cost=data.get('cost')
    )
    
    db.add(project)
    await db.commit()
    
    await state.clear()
    await callback.message.answer("–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    await show_projects_menu(callback)

def get_skip_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_deadline"))
    return builder.as_markup()